include_guard(GLOBAL)
cmake_minimum_required(VERSION 3.25 FATAL_ERROR)

# Checks if version matches version specification.
# A semver version follows <basic>[-<prerelease>][+<build_metadata>]
# A cmake semver specification follows cmake ranges <semver_spec>[(...|...<)<semver_spec>]
#   <semver_spec> ::=
function(semver_maches version_ spec_ matches_ exact_)
    semver_splitVersion_(${version_} base_ pre_ build_ isValidVersion_)
    if (NOT isValidVersion_)
        message(AUTHOR_WARNING "\"${version_}\" is an invalid semver version")
        return()
    endif()

    semver_splitSpec_(${spec_} minBase_ minPre_ minBuild_ minClosed_ maxBase_ maxPre_ maxBuild_ maxClosed_ isValidSpec_)
    if (NOT isValidSpec_)
        message(AUTHOR_WARNING "\"${spec_}\" is an invalid semver specification")
        return()
    endif()

    # build metadata not used on comparisons
    # For the rest, calculate partial conditions
    semver_cmpBase_(${base_} ${minBase_} minBaseCmp_)
    semver_cmpBase_(${base_} ${maxBase_} maxBaseCmp_)
    semver_cmpPre_(${pre_} ${minPre_} minPreCmp_)
    semver_cmpPre_(${pre_} ${maxPre_} maxPreCmp_)
    semver_minOk_(${minBaseCmp_} ${minClosed} minBaseOk_)
    semver_maxOk_(${maxBaseCmp_} ${maxClosed} maxBaseOk_)
    semver_minOk_(${minPreCmp_} ${minClosed} minPreOk_)
    semver_maxOk_(${maxPreCmp_} ${maxClosed} maxPreOk_)

    if ((minBaseOk_ OR (minBaseCmp_ EQUAL "0" AND minPreOk_))
            AND (maxBaseOk_ OR (maxBaseCmp_ EQUAL "0" AND maxPreOk_)))
        set(${matches} TRUE PARENT_SCOPE)
        if (base_ STREQUAL minBase_ AND base_ STREQUAL maxBase_ AND pre_ STREQUAL minPre_ AND pre_ STREQUAL maxPre_)
            set(${exact} TRUE PARENT_SCOPE)
        endif()
    endif()
endfunction()

# Builds a config versuion file for semver versions.
# copy it along this semver.cmake file to be included
# Expects ${PROJECT_NAME}_VERSION to be defined prior to calling this function.
# Expects ${PACKAGE_FIND_NAME}_FIND_SEMVER_VERSION to be defined before called find_package calls version file generated by this function.
function(semver_write_version_config filename_)
    set(content_
"
# This is a semver (https://semver.org/spec/v2.0.0.html) version file for the Config-mode of find_package() generated by ProjectWorkflow.
# DO NOT EDIT IT!
#
# Expects \${PROJECT_NAME}_VERSION to be defined prior to calling this function.
# But cmake doesn't support prerelease nor build parts. So \${PROJECT_NAME}_VERSION must be overridden after project call.
# example
#   project(MyProject VERSION 1.2.3)
#   set(MyProject_VERSION \"1.2.3-alpha+build3\")
#
# Prerelease versions cannot be passed in directly via the find_package command,
# so you must define \${PACKAGE_FIND_NAME}_FIND_SEMVER_VERSION before find_package
# example (to locate version \"1.2.3-alpha+build3\")
#   set(OtherProject_FIND_SEMVER_VERSION \"1.2.3-alpha+build3\")
#   find_package(OtherProject 1.2.3)
# example (to locate range \"1.2.3-alpha+build3...<2\")
#   set(OtherProject_FIND_SEMVER_VERSION \"1.2.3-alpha+build3...<2\")
#   find_package(OtherProject 1.2.3...<2)
#
# The created file sets PACKAGE_VERSION_EXACT if the current version string and
# the requested version string are exactly the same and it sets
# PACKAGE_VERSION_COMPATIBLE if the current version is semver compatible with requested version.

# failure by default
set(PACKAGE_VERSION_COMPATIBLE FALSE)
set(PACKAGE_VERSION_EXACT FALSE)

# Semver version file generated for ${PROJECT_NAME} version ${${PROJECT_NAME}_VERSION}
set(PACKAGE_VERSION \"${${PROJECT_NAME}_VERSION}\")

# Update PACKAGE_FIND_VERSION and PACKAGE_FIND_VERSION_COMPLETE for completeness
set(PACKAGE_FIND_VERSION \"\${\${PACKAGE_NAME}_FIND_SEMVER_VERSION}\")
set(PACKAGE_FIND_VERSION_COMPLETE \"\${\${PACKAGE_NAME}_FIND_SEMVER_VERSION}\")

# Checking version
if(\"\" STREQUAL PACKAGE_FIND_VERSION)
  # If no version specified accept this one
  set(PACKAGE_VERSION_COMPATIBLE TRUE)
else()
    semver_maches(\${PACKAGE_VERSION} \${PACKAGE_FIND_VERSION} matches_ exact_)
    if(PACKAGE_VERSION MATCHES [[0\..*]] AND NOT exact_)
        # If major version is 0 only exact search must be done.
        set(matches_ FALSE)
    endif()
    set(PACKAGE_VERSION_COMPATIBLE \${matches_})
    set(PACKAGE_VERSION_EXACT \${exact_})
endif()

# check that the installed version has the same 32/64bit-ness as the one which is currently searching
if(CMAKE_SIZEOF_VOID_P STREQUAL \"\")
  # if the installed or the using project don't have CMAKE_SIZEOF_VOID_P set, ignore it
  return()
elseif(NOT CMAKE_SIZEOF_VOID_P STREQUAL \"${CMAKE_SIZEOF_VOID_P}\")
  math(EXPR installedBits_ \"${CMAKE_SIZEOF_VOID_P} * 8\")
  set(PACKAGE_VERSION \"\${PACKAGE_VERSION} (\${installedBits}bit)\")
  set(PACKAGE_VERSION_UNSUITABLE TRUE)
endif()
"
)

file(WRITE ${filename_} ${content_})
endfunction()




# Splits a semver version and check if it is valid.
function(semver_splitVersion_ version base pre build isValidVer)
    # Separate base, prerelease and build metadata
    if(NOT ${version} MATCHES [[^([0-9\.]+)(\-([0-9a-zA-Z\.-]+))?(\+([0-9a-zA-Z\.-]+))?$]])
        set(${isValidVer} FALSE PARENT_SCOPE)
        return()
    endif()

    # Extract parts. To be more checked.

    set(base_ "${CMAKE_MATCH_1}")
    set(pre_ "${CMAKE_MATCH_3}")
    set(build_ "${CMAKE_MATCH_5}")

    # Check each fragment for validity.
    semver_validBaseVer_("${base_}" isValid_)
    if(NOT isValid_)
        set(${isValidVer} FALSE PARENT_SCOPE)
        return()
    endif()

    semver_validPreVer_("${pre_}" isValid_)
    if(NOT isValid_)
        set(${isValidVer} FALSE PARENT_SCOPE)
        return()
    endif()

    semver_validBuildVer_("${build_}" isValid_)
    if(NOT isValid_)
        set(${isValidVer} FALSE PARENT_SCOPE)
        return()
    endif()

    #Export all valid results
    set(${base} ${base_} PARENT_SCOPE)
    set(${pre} ${pre_} PARENT_SCOPE)
    set(${build} ${build_} PARENT_SCOPE)
    set(${isValidVer} TRUE PARENT_SCOPE)
endfunction()

function(semver_validBaseVer_ base isValid)
    if("${base}" MATCHES [[^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)$]])
        set(${isValid} TRUE PARENT_SCOPE)
    else()
        set(${isValid} FALSE PARENT_SCOPE)
    endif()
endfunction()

function(semver_validPreVer_ pre isValid)
    if("${pre}" STREQUAL ""
        OR "${pre}" MATCHES [[^((0|[1-9][0-9]*)|([0-9a-zA-Z-]*[a-zA-Z-][0-9a-zA-Z-]*))(\.((0|[1-9][0-9]*)|([0-9a-zA-Z-]*[a-zA-Z-][0-9a-zA-Z-]*)))*$]])
        set(${isValid} TRUE PARENT_SCOPE)
    else()
        set(${isValid} FALSE PARENT_SCOPE)
    endif()
endfunction()

function(semver_validBuildVer_ build isValid)
    if("${build}" STREQUAL ""
        OR "${build}" MATCHES [[^(([0-9]+)|([0-9a-zA-Z-]*[a-zA-Z-][0-9a-zA-Z-]*))(\.(([0-9]+)|([0-9a-zA-Z-]*[a-zA-Z-][0-9a-zA-Z-]*)))*$]])
        set(${isValid} TRUE PARENT_SCOPE)
    else()
        set(${isValid} FALSE PARENT_SCOPE)
    endif()
endfunction()

# Splits a semver specification, closed/open range ends and if it is valid.
# If a single version specification is passed, it is interpreted as a closed range from this version specification to itself.
function(semver_splitSpec_ spec_ minBase_ minPre_ minBuild_ minClosed_ maxBase_ maxPre_ maxBuild_ maxClosed_ isValidSpec_)
    # Separate base, prerelease and build metadata
    if(NOT ${spec_} MATCHES [[^([0-9\.]+)(\-[0-9a-zA-Z\.-]+)?(\+[0-9a-zA-Z\.-]+)?(\.\.\.(<?)([0-9\.]+)(\-[0-9a-zA-Z\.-]+)?(\+[0-9a-zA-Z\.-]+)?)?$]])
        set(${isValidSpec_} FALSE PARENT_SCOPE)
        return()
    endif()

    # Extract parts. To be more checked.
    set(${minBase_} "${CMAKE_MATCH_1}")
    set(${minPre_} "${CMAKE_MATCH_2}")
    set(${minBuild_} "${CMAKE_MATCH_3}")
    set(${minClosed_} TRUE)
    set(${maxnBase_} "${CMAKE_MATCH_6}")
    set(${maxPre_} "${CMAKE_MATCH_7}")
    set(${maxBuild_} "${CMAKE_MATCH_8}")
    if("${CMAKE_MATCH_5}" STREQUAL "<")
        set(${maxClosed_} FALSE)
    else()
        set(${maxClosed_} TRUE)
    endif()

    # Check each fragment for validity.
    semver_validBaseSpec_(${${minBase_}} isValid_)
    if(NOT isValid_)
        set(${isValidSpec_} FALSE PARENT_SCOPE)
        return()
    endif()
    semver_validBaseSpec_(${${maxBase_}} isValid_)
    if(NOT isValid_)
        set(${isValidSpec_} FALSE PARENT_SCOPE)
        return()
    endif()
    semver_validPreSpec_(${${minPre_}} isValid_)
    if(NOT isValid_)
        set(${isValidSpec_} FALSE PARENT_SCOPE)
        return()
    endif()
    semver_validPreSpec_(${${maxPre_}} isValid_)
    if(NOT isValid_)
        set(${isValidSpec_} FALSE PARENT_SCOPE)
        return()
    endif()
    semver_validBuildSpec_(${${minBuild_}} isValid_)
    if(NOT isValid_)
        set(${isValidSpec_} FALSE PARENT_SCOPE)
        return()
    endif()
    semver_validBuildSpec_(${${maxBuild_}} isValid_)
    if(NOT isValid_)
        set(${isValidSpec_} FALSE PARENT_SCOPE)
        return()
    endif()

    #Export all valid results
    set(${minBase_} ${${minBase_}} PARENT_SCOPE)
    set(${minPre_} ${${minPre_}} PARENT_SCOPE)
    set(${minBuild_} ${${minBuild_}} PARENT_SCOPE)
    set(${minClosed_} ${${minClosed_}} PARENT_SCOPE)
    set(${maxBase_} ${${maxBase_}} PARENT_SCOPE)
    set(${maxPre_} ${${maxPre_}} PARENT_SCOPE)
    set(${maxBuild_} ${${maxBuild_}} PARENT_SCOPE)
    set(${maxClosed_} ${${maxClosed_}} PARENT_SCOPE)
    set(${isValidSpec_} TRUE PARENT_SCOPE)
endfunction()

function(semver_validBaseSpec_ base_ isValid_)
    if(${base_} MATCHES [[(0|[1-9][0-9]*)(\.(0|[1-9][0-9]*)(\.(0|[1-9][0-9]*))?)?]])
        set(${isValid_} TRUE PARENT_SCOPE)
    else()
        set(${isValid_} FALSE PARENT_SCOPE)
    endif()
endfunction()

function(semver_validPreSpec_ pre_ isValid_)
    set(numericId_ [[(0|[1-9][0-9]*)]])
    if(${pre_} MATCHES [[((0|[1-9][0-9]*)|([0-9a-zA-Z-]*[a-zA-Z-][0-9a-zA-Z-]*))(\.((0|[1-9][0-9]*)|([0-9a-zA-Z-]*[a-zA-Z-][0-9a-zA-Z-]*)))*]])
        set(${isValid_} TRUE PARENT_SCOPE)
    else()
        set(${isValid_} FALSE PARENT_SCOPE)
    endif()
endfunction()

function(semver_validBuildSpec_ build_ isValid_)
    set(digits_ [[[0-9]+]])
    if(${build_} MATCHES [[(([0-9]+)|([0-9a-zA-Z-]*[a-zA-Z-][0-9a-zA-Z-]*))(\.(([0-9]+)|([0-9a-zA-Z-]*[a-zA-Z-][0-9a-zA-Z-]*)))*]])
        set(${isValid_} TRUE PARENT_SCOPE)
    else()
        set(${isValid_} FALSE PARENT_SCOPE)
    endif()
endfunction()

# Compares version with respect to base_spec
# a la CMake
#   0.1.0 > 0
#   0.1.0 > 0.0
#   0.1.0 = 0.1
#   0.1.0 < 0.1.0
#   0.1.0 < 1
function(semver_cmpBase_ version_ spec_ cmp_)
    if (version_ VERSION_LESS spec_)
        set(${cmp_} "-1" PARENT_SCOPE)
    elseif(version_ VERSION_GREATER spec_)
        set(${cmp_} "1" PARENT_SCOPE)
    else()
        set(${cmp_} "0" PARENT_SCOPE)
    endif()
endfunction()

# Compares version with respect to pre_spec
# decimal sequence comparison and each component comparison as number or as string
#   0.0.0-alpha < 0.0.0-beta
#   0.0.0-alpha.9 < 0.0.0-alpha.10
#   0.0.0-alpha.10 < 0.0.0-alpha.a
#   0.0.0-alpha.10 > 0.0.0-alpha
#   0.0.0-rc10 < 0.0.0-rc9
function(semver_cmpPre_ pre_ spec_ cmp_)
    string(REGEX MATCHALL [=[[^\.]+]=] preParts_ ${pre_})
    string(REGEX MATCHALL "[^\\.]+" specParts_ ${spec_})

    foreach(prePart_ specPart_ IN ZIP_LISTS preParts_ specParts_)
        # At this point parts compared so far are equal
        if (DEFINED prePart_ AND NOT DEFINED specPart_)
            set(${cmp_} "1" PARENT_SCOPE)
            return()
        elseif(NOT DEFINED prePart_ AND DEFINED specPart_)
            set(${cmp_} "-1" PARENT_SCOPE)
            return()
        else()
            semver_cmpPrePart_(${prePart_} ${specPart_} partCmp_)
            if (NOT partCmp_ EQUAL "0")
                set(${cmp_} ${partCmp_} PARENT_SCOPE)
                return()
            endif()
        endif()
    endforeach()

    set(${cmp_} "0" PARENT_SCOPE)
endfunction()

function(semver_cmpPrePart_ pre_ spec_ cmp_)
    if (pre_ MATCHES "0|[1-9][0-9]*" AND spec_ MATCHES "0|[1-9][0-9]*")
        if (pre_ LESS spec_)
            set(${cmp_} "-1" PARENT_SCOPE)
        elseif(pre_ GREATER spec_)
            set(${cmp_} "1" PARENT_SCOPE)
        else()
            set(${cmp_} "0" PARENT_SCOPE)
        endif()
    else()
        if (pre_ STRLESS spec_)
            set(${cmp_} "-1" PARENT_SCOPE)
        elseif(pre_ STRGREATER spec_)
            set(${cmp_} "1" PARENT_SCOPE)
        else()
            set(${cmp_} "0" PARENT_SCOPE)
        endif()
    endif()
endfunction()

function(semver_minOk_ cmp_ closed_ ok_)
    if (closed_ AND cmp_ GREATER_EQUAL "0" OR (NOT closed_ AND cmp_ GREATER "0"))
        set(${ok_} TRUE PARENT_SCOPE)
    else()
        set(${ok_} FALSE PARENT_SCOPE)
    endif()
endfunction()

function(semver_maxOk_ cmp_ closed_ ok_)
    if (closed_ AND cmp_ LESS_EQUAL "0" OR (NOT closed_ AND cmp_ LESS "0"))
        set(${ok_} TRUE PARENT_SCOPE)
    else()
        set(${ok_} FALSE PARENT_SCOPE)
    endif()
endfunction()
