include_guard(GLOBAL)
cmake_minimum_required(VERSION 3.25 FATAL_ERROR)

include(GNUInstallDirs)
include(CMakePackageConfigHelpers)
include(semver)

macro(set_or_default_ var_ valueVar_ default_)
    if (DEFINED ${valueVar_})
        set(${var_} ${${valueVar_}})
    else()
        set(${var_} ${default_})
    endif()
endmacro()

# Builds a stereotyped and simple config file
function(write_config_in_ filename_)
    set(options_ )
    set(oneValueArgs_ PACKAGE)
    set(multiValueArgs_ EXPORTS)
    cmake_parse_arguments(PWI "${options_}" "${oneValueArgs_}" "${multiValueArgs_}" ${ARGN})

    # include(CMakeFindDependencyMacro)
    # find_dependency(Threads)

    set(content_
"
# File automatically generated by ProjectWorkflow
# DON'T EDIT IT!

# Standard CMakePackageConfigHelpers module initialization.
# Paths and so on.
@PACKAGE_INIT@

# Include all exported targets
foreach(export_ @PWI_EXPORTS@)
    include(\"\${CMAKE_CURRENT_LIST_DIR}/\${export_}.cmake\")
endforeach()

# Check all components found
check_required_components(@PWI_PACKAGE@)
")

    # Preserve up to
    set(PACKAGE_INIT "@PACKAGE_INIT@")
    file(CONFIGURE OUTPUT ${filename_} CONTENT "${content_}" @ONLY)
endfunction()

# Install a simple package config file, it version file and all the exports and targets
function(PW_install)
    set(options_ )
    set(oneValueArgs_ PACKAGE VERSION NAMESPACE COMPATIBILITY)
    set(multiValueArgs_ EXPORTS)
    cmake_parse_arguments(PWI "${options_}" "${oneValueArgs_}" "${multiValueArgs_}" ${ARGN})

    if (PWI_UNPARSED_ARGUMENTS)
        message(FATAL_ERROR "Unknown arguments in PW_install \"${PWI_UNPARSED_ARGUMENTS}\"")
    endif()

    if (NOT PWI_PACKAGE)
        message(FATAL_ERROR "PW_install without package name")
    endif()

    if (NOT PWI_EXPORTS)
        message(AUTHOR_WARNING "PW_install without exports")
    endif()

    if (NOT PWI_COMPATIBILITY)
        message(STATUS "PW_install for package ${PWI_PACKAGE} without version compatibility. Semver by default.")
        set(PWI_COMPATIBILITY "Semver")
    endif()

    set_or_default_(packageVersion_ PWI_VERSION "${PROJECT_VERSION}")
    set_or_default_(packageNamespace_ PWI_NAMESPACE "${PWI_PACKAGE}::")

    # Prepare cmake scripts destination
    # From GnuInstallDirs
    set(PW_INSTALL_SCRIPTDIR "${CMAKE_INSTALL_LIBDIR}/${CMAKE_LIBRARY_ARCHITECTURE}/cmake/${PWI_PACKAGE}-${packageVersion_}")
    message(TRACE "Writing to ${PW_INSTALL_SCRIPTDIR}")

    foreach(export_ ${PWI_EXPORTS})
        install(EXPORT ${export_}
            FILE ${export_}.cmake
            NAMESPACE ${packageNamespace_}
            DESTINATION ${PW_INSTALL_SCRIPTDIR})
    endforeach()

    set(config_file_ "${CMAKE_CURRENT_BINARY_DIR}/${PWI_PACKAGE}Config.cmake")
    set(config_file_in_ "${config_file_}.in")

    write_config_in_(${config_file_in_} ${ARGN})
    configure_package_config_file(${config_file_in_} ${config_file_}
        INSTALL_DESTINATION ${PW_INSTALL_SCRIPTDIR})

    set(config_version_file_ "${CMAKE_CURRENT_BINARY_DIR}/${PWI_PACKAGE}ConfigVersion.cmake")
    if("Semver" STREQUAL PWI_COMPATIBILITY)
        set(version_files_ "${config_version_file_}"
            "${CMAKE_CURRENT_FUNCTION_LIST_DIR}/semver.cmake") # relative to this file
        semver_write_version_config("${config_version_file_}"
            VERSION "${packageVersion_}")
    else()
        set(version_files_ "${config_version_file_}")
        write_basic_package_version_file("${config_version_file_}"
            VERSION "${packageVersion_}"
            COMPATIBILITY "${PWI_COMPATIBILITY}")
    endif()

    install(FILES "${config_file_}" ${version_files_}
        DESTINATION ${PW_INSTALL_SCRIPTDIR})
endfunction()
